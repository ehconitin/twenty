---
description: 
globs: 
alwaysApply: false
---
# Webhook Migration to Core Schema - AI Implementation Guide

## 🎯 Task Overview

**Migrate webhooks from workspace-specific storage to core schema**
- Move from `WebhookWorkspaceEntity` (workspace schemas) to `WebhookEntity` (core schema)
- Change from TwentyORM to TypeORM with workspaceId filtering
- Frontend already expects core schema - this unblocks existing functionality

## 🔍 Key Discovery

**Frontend is already configured for core schema:**
- ✅ `CoreObjectNameSingular.Webhook = 'webhook'` exists
- ✅ `useWebhookForm` uses `CoreObjectNameSingular.Webhook`
- ✅ No frontend changes needed

## 📁 File Changes Required

### 🔴 CREATE - New Core Implementation
```
packages/twenty-server/src/engine/core-modules/webhook/
├── webhook.entity.ts           # NEW: Core TypeORM entity
├── webhook.service.ts          # NEW: Core service
├── webhook.module.ts           # NEW: Core module
└── webhook.resolver.ts         # NEW: GraphQL resolver

packages/twenty-server/src/database/typeorm/core/migrations/common/
└── [timestamp]-transferWebhookToCore.ts  # NEW: Migration script
```

### 🔴 DELETE - Remove Workspace Implementation
```
packages/twenty-server/src/modules/webhook/standard-objects/
└── webhook.workspace-entity.ts # DELETE: Remove entirely
```

### 🟡 UPDATE - Repository Pattern Changes
```
packages/twenty-server/src/modules/webhook/jobs/
├── call-webhook-jobs.job.ts    # UPDATE: TwentyORM → TypeORM + workspaceId filter

packages/twenty-server/src/modules/webhook/query-hooks/
├── webhook-create-one.pre-query.hook.ts   # UPDATE: Entity reference
├── webhook-create-many.pre-query.hook.ts  # UPDATE: Entity reference
├── webhook-update-one.pre-query.hook.ts   # UPDATE: Entity reference
└── webhook-update-many.pre-query.hook.ts  # UPDATE: Entity reference

packages/twenty-server/src/engine/core-modules/
└── core-engine.module.ts       # UPDATE: Add WebhookModule

packages/twenty-server/src/engine/workspace-manager/workspace-sync-metadata/
└── standard-objects/index.ts   # UPDATE: Remove WebhookWorkspaceEntity
```

### 🟢 NO CHANGES NEEDED
```
packages/twenty-server/src/utils/remove-secret-from-webhook-record.ts     # Pure utility
packages/twenty-server/src/modules/webhook/query-hooks/webhook-url-validation.service.ts  # Pure validation
packages/twenty-front/src/ (ALL FILES)                                    # Already core-ready
```

## 🛠️ Implementation Steps

### Step 1: Create Core Entity
```typescript
// packages/twenty-server/src/engine/core-modules/webhook/webhook.entity.ts
import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, ManyToOne, JoinColumn } from 'typeorm';
import { Workspace } from '../workspace/workspace.entity';

@Entity({ name: 'webhook', schema: 'core' })
export class WebhookEntity {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  targetUrl: string;

  @Column('simple-array')
  operations: string[];

  @Column({ nullable: true })
  description?: string;

  @Column()
  secret: string;

  @Column('uuid')
  workspaceId: string;

  @CreateDateColumn({ type: 'timestamptz' })
  createdAt: Date;

  @UpdateDateColumn({ type: 'timestamptz' })
  updatedAt: Date;

  @DeleteDateColumn({ type: 'timestamptz' })
  deletedAt?: Date;

  @ManyToOne(() => Workspace)
  @JoinColumn({ name: 'workspaceId' })
  workspace: Workspace;
}
```

### Step 2: Create Core Service
```typescript
// packages/twenty-server/src/engine/core-modules/webhook/webhook.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { WebhookEntity } from './webhook.entity';

@Injectable()
export class WebhookService {
  constructor(
    @InjectRepository(WebhookEntity, 'core')
    private readonly webhookRepository: Repository<WebhookEntity>,
  ) {}

  async findByWorkspaceId(workspaceId: string): Promise<WebhookEntity[]> {
    return this.webhookRepository.find({
      where: { workspaceId },
    });
  }

  async findByWorkspaceIdAndOperations(
    workspaceId: string,
    operations: string[],
  ): Promise<WebhookEntity[]> {
    return this.webhookRepository.find({
      where: operations.map(operation => ({
        workspaceId,
        operations: Raw(alias => `${alias} @> ARRAY[:operation]`, { operation }),
      })),
    });
  }
}
```

### Step 3: Create Core Module
```typescript
// packages/twenty-server/src/engine/core-modules/webhook/webhook.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { WebhookEntity } from './webhook.entity';
import { WebhookService } from './webhook.service';

@Module({
  imports: [TypeOrmModule.forFeature([WebhookEntity], 'core')],
  providers: [WebhookService],
  exports: [WebhookService, TypeOrmModule],
})
export class WebhookModule {}
```

### Step 4: Create Database Migration
```typescript
// packages/twenty-server/src/database/typeorm/core/migrations/common/[timestamp]-transferWebhookToCore.ts
import { MigrationInterface, QueryRunner } from 'typeorm';

export class TransferWebhookToCore[timestamp] implements MigrationInterface {
  name = 'TransferWebhookToCore[timestamp]';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // Check if workspace schemas exist
    const workspaceSchemas = await queryRunner.query(
      `SELECT schema_name FROM information_schema.schemata 
       WHERE schema_name LIKE 'workspace_%'`
    );

    if (workspaceSchemas.length === 0) return;

    // Create core webhook table if it doesn't exist
    await queryRunner.query(`
      CREATE TABLE IF NOT EXISTS "core"."webhook" (
        "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
        "targetUrl" varchar NOT NULL,
        "operations" text[] NOT NULL DEFAULT '{*.*}',
        "description" varchar,
        "secret" varchar NOT NULL,
        "workspaceId" uuid NOT NULL,
        "createdAt" timestamptz NOT NULL DEFAULT now(),
        "updatedAt" timestamptz NOT NULL DEFAULT now(),
        "deletedAt" timestamptz
      )
    `);

    // Move webhook data from each workspace schema to core
    for (const { schema_name: schemaName } of workspaceSchemas) {
      const tableExists = await queryRunner.query(
        `SELECT EXISTS(
          SELECT 1 FROM information_schema.tables 
          WHERE table_schema = '${schemaName}' AND table_name = 'webhook'
        )`
      );

      if (tableExists[0].exists) {
        const workspaceId = schemaName.replace('workspace_', '');
        
        // Copy data to core schema with workspaceId
        await queryRunner.query(`
          INSERT INTO "core"."webhook" 
          ("id", "targetUrl", "operations", "description", "secret", "workspaceId", "createdAt", "updatedAt", "deletedAt")
          SELECT 
            "id", 
            "targetUrl", 
            "operations", 
            "description", 
            "secret", 
            '${workspaceId}'::uuid,
            "createdAt", 
            "updatedAt", 
            "deletedAt"
          FROM "${schemaName}"."webhook"
        `);

        // Drop the workspace table
        await queryRunner.query(`DROP TABLE "${schemaName}"."webhook"`);
      }
    }

    // Add indexes for performance
    await queryRunner.query(`CREATE INDEX IF NOT EXISTS "IDX_webhook_workspaceId" ON "core"."webhook" ("workspaceId")`);
    await queryRunner.query(`CREATE INDEX IF NOT EXISTS "IDX_webhook_operations" ON "core"."webhook" USING GIN ("operations")`);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // Rollback: Move data back to workspace schemas
    const webhooks = await queryRunner.query(`SELECT * FROM "core"."webhook"`);
    
    for (const webhook of webhooks) {
      const schemaName = `workspace_${webhook.workspaceId}`;
      
      // Create workspace table if needed
      await queryRunner.query(`
        CREATE TABLE IF NOT EXISTS "${schemaName}"."webhook" (
          "id" uuid PRIMARY KEY,
          "targetUrl" varchar NOT NULL,
          "operations" text[] NOT NULL DEFAULT '{*.*}',
          "description" varchar,
          "secret" varchar NOT NULL,
          "createdAt" timestamptz NOT NULL DEFAULT now(),
          "updatedAt" timestamptz NOT NULL DEFAULT now(),
          "deletedAt" timestamptz
        )
      `);

      // Insert data back
      await queryRunner.query(`
        INSERT INTO "${schemaName}"."webhook" 
        ("id", "targetUrl", "operations", "description", "secret", "createdAt", "updatedAt", "deletedAt")
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `, [webhook.id, webhook.targetUrl, webhook.operations, webhook.description, webhook.secret, webhook.createdAt, webhook.updatedAt, webhook.deletedAt]);
    }

    await queryRunner.query(`DROP TABLE "core"."webhook"`);
  }
}
```

### Step 5: Update Repository Usage
```typescript
// packages/twenty-server/src/modules/webhook/jobs/call-webhook-jobs.job.ts
// CHANGE: Replace TwentyORMGlobalManager with TypeORM Repository

// OLD:
import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';
import { WebhookWorkspaceEntity } from 'src/modules/webhook/standard-objects/webhook.workspace-entity';

constructor(
  private readonly twentyORMGlobalManager: TwentyORMGlobalManager,
) {}

const webhookRepository = await this.twentyORMGlobalManager.getRepositoryForWorkspace<WebhookWorkspaceEntity>(
  workspaceEventBatch.workspaceId,
  'webhook',
);

// NEW:
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { WebhookEntity } from 'src/engine/core-modules/webhook/webhook.entity';

constructor(
  @InjectRepository(WebhookEntity, 'core')
  private readonly webhookRepository: Repository<WebhookEntity>,
) {}

// Add workspaceId filter to all queries:
const webhooks = await this.webhookRepository.find({
  where: [
    { 
      workspaceId: workspaceEventBatch.workspaceId,
      operations: ArrayContains([`${nameSingular}.${operation}`]) 
    },
    // ... other conditions with workspaceId
  ],
});
```

### Step 6: Update Query Hooks
```typescript
// packages/twenty-server/src/modules/webhook/query-hooks/webhook-create-one.pre-query.hook.ts
// CHANGE: Update import

// OLD:
import { WebhookWorkspaceEntity } from 'src/modules/webhook/standard-objects/webhook.workspace-entity';
payload: CreateOneResolverArgs<WebhookWorkspaceEntity>

// NEW:
import { WebhookEntity } from 'src/engine/core-modules/webhook/webhook.entity';
payload: CreateOneResolverArgs<WebhookEntity>
```

### Step 7: Update Module Registration
```typescript
// packages/twenty-server/src/engine/core-modules/core-engine.module.ts
// ADD: Import and register WebhookModule

import { WebhookModule } from './webhook/webhook.module';

@Module({
  imports: [
    // ... existing imports
    WebhookModule,
  ],
  exports: [
    // ... existing exports  
    WebhookModule,
  ],
})
export class CoreEngineModule {}
```

```typescript
// packages/twenty-server/src/engine/workspace-manager/workspace-sync-metadata/standard-objects/index.ts
// REMOVE: WebhookWorkspaceEntity from the array

export const standardObjectMetadataDefinitions = [
  // ... other entities
  // WebhookWorkspaceEntity, // REMOVE THIS LINE
];
```

### Step 8: Delete Workspace Entity
```bash
# DELETE this file entirely:
rm packages/twenty-server/src/modules/webhook/standard-objects/webhook.workspace-entity.ts
```

## 🧪 Testing Checklist

### Unit Tests
- [ ] Core entity CRUD operations work
- [ ] Webhook service methods work with workspaceId filtering
- [ ] Migration script works with sample data

### Integration Tests  
- [ ] Webhook creation via GraphQL works
- [ ] Webhook triggering works
- [ ] Workspace isolation is maintained
- [ ] Frontend webhook UI continues working

## 🔍 Key Implementation Notes

### Critical Patterns to Follow
1. **Always filter by workspaceId** in repository queries
2. **Use `@InjectRepository(WebhookEntity, 'core')`** for dependency injection
3. **Follow the exact migration pattern** from `1743085000788-transferMetadataToCore.ts`
4. **Import from core modules** not workspace modules

### Common Mistakes to Avoid
1. ❌ Don't forget workspaceId filtering in queries
2. ❌ Don't use TwentyORM for core entities
3. ❌ Don't modify frontend - it's already ready
4. ❌ Don't change utility functions that don't use entities

### Reference Files for Patterns
- **Core Entity**: `packages/twenty-server/src/engine/core-modules/user/user.entity.ts`
- **Core Service**: `packages/twenty-server/src/engine/core-modules/user/user.service.ts`
- **Migration**: `packages/twenty-server/src/database/typeorm/core/migrations/common/1743085000788-transferMetadataToCore.ts`
- **Repository Usage**: Any service using `@InjectRepository(Entity, 'core')`

### Key Reference Commits
- **`7f1d6f5c7f`**: "Continue migration schema from metadata to core" - Shows table transfer pattern
- **`d38f448d05`**: "Move fieldMetadata migration from metadata to core" - Shows file movement pattern  
- **`7a4599321b`**: "Prepare for schema fusion" - Shows preparation strategy
- **`1743085000788-transferMetadataToCore.ts`**: Migration script using `ALTER TABLE SET SCHEMA` pattern

### Migration Pattern Reference
The exact pattern to follow is in commit `7f1d6f5c7f` and migration `1743085000788-transferMetadataToCore.ts`:
1. Create core table structure
2. Copy data from workspace schemas to core with `workspaceId`
3. Drop workspace tables
4. Add indexes for performance
5. Update all repository usage to filter by `workspaceId`
